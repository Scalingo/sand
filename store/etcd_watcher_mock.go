// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/sand/store (interfaces: EtcdWatcher)

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/v3/clientv3"
)

// MockEtcdWatcher is a mock of EtcdWatcher interface
type MockEtcdWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockEtcdWatcherMockRecorder
}

// MockEtcdWatcherMockRecorder is the mock recorder for MockEtcdWatcher
type MockEtcdWatcherMockRecorder struct {
	mock *MockEtcdWatcher
}

// NewMockEtcdWatcher creates a new mock instance
func NewMockEtcdWatcher(ctrl *gomock.Controller) *MockEtcdWatcher {
	mock := &MockEtcdWatcher{ctrl: ctrl}
	mock.recorder = &MockEtcdWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEtcdWatcher) EXPECT() *MockEtcdWatcherMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockEtcdWatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockEtcdWatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEtcdWatcher)(nil).Close))
}

// WatchChan mocks base method
func (m *MockEtcdWatcher) WatchChan() clientv3.WatchChan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchChan")
	ret0, _ := ret[0].(clientv3.WatchChan)
	return ret0
}

// WatchChan indicates an expected call of WatchChan
func (mr *MockEtcdWatcherMockRecorder) WatchChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchChan", reflect.TypeOf((*MockEtcdWatcher)(nil).WatchChan))
}
